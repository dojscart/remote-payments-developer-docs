
{
  "x-generator": "NSwag v13.12.1.0 (NJsonSchema v10.4.6.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Payment Service",
    "version": "2.0.0",
    "description": "# Introduction\n\nThe Dojo API is RESTful. It returns HTTP response codes to indicate errors. It also\naccepts and returns JSON in the HTTP body.\n\n## Authentication\n\n## HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The various HTTP status codes we might return are listed below.\n\n| Code  | Title | Description |\n|---------|----------------|----------------|\n|200| OK | The request was successful. |\n|400| Bad request | Bad request, probably due to a syntax error. |\n|401| Unauthorized | Authentication required. |\n|402| Request Failed | Over plan quota on this endpoint. |\n|404| Not found | The resource does not exist. |\n|405| Method Not Allowed| The used request method is not supported by that resource, e.g. using a POST on a resource that requires a GET.\n|409| Conflict | The request could not be completed because it conflicted with another request or the server's configuration. |\n|50X| Internal Server Error | An error occurred with our API.|\n\n## Errors\n\nDojo follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs. All errors are returned in the form of JSON.\n\n### Error Schema\n\nIn case of an error, the response object contains the following fields:\n\n| Field | Type| Required| Description |\n|---------|----------------|----------------|---------------|\n|errors| Object || Returns an explanation of errors.|\n|type| String || Returns the type of error that was encountered.|\n|title| String|| Returns a short summary of errors. |\n|status| Integer | | Returns the HTTP status code.|\n|traceId| String ||The unique identifier of the failing request.|\n\nThe following example shows a possible error response:\n\n``` json\n{\n    \"errors\": {\n        \"Reference\": [\n            \"The Reference field is required.\"\n        ]\n    },\n    \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"traceId\": \"00-a405f077df056a498323ffbcec05923f-aa63e6f4dbbc734a-01\"\n}\n```\n\n## Versioning\n\nDojo API uses the YYYY-MM-DD API version-naming scheme. You have to pass the version as the `version` header in all API calls.\n\nWhen we make [breaking changes](../development-resources/versioning-overview/#breaking-changes) to the API, we release new dated versions. \n\nThe current version is 2021-10-22. Check the last updates out in the [changelog](../development-resources/versioning-overview/#changelog).\n\n## Postman collection\n\nYou can run the API collection in Postman:\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/16735701-7fe64908-9da4-4c17-b78d-80a1f41b4295?action=collection%2Ffork&collection-url=entityId%3D16735701-7fe64908-9da4-4c17-b78d-80a1f41b4295%26entityType%3Dcollection%26workspaceId%3Dfdd152df-0154-428c-aeb4-1b90e46b8523)",
    "termsOfService": "https://dojo.tech/legal/",
    "contact": {
      "name": "Dojo Developer Experience Team"
    }
  },
  "servers": [
    {
      "url": "https://api.dojo.tech",
      "description": "Production API"
    }
  ],
  "tags": [
    {
      "name": "Payment intents",
      "description": "Allows you to take and manage payments.\n\n**Documentation**: [Payments](../payments)"
    },
    {
      "name": "Refunds",
      "description": "Allows you to manage a refund for payments.\n\n**Documentation**: [Refunds](../payments)"
    },
    {
      "name": "Reversal",
      "description": "\n\n**Documentation**: [Reversal](../payments)"
    },
    {
      "name": "Captures",
      "description": "\n\n**Documentation**: [Captures](../payments)"
    }
  ],
  "x-tagGroup": [
    {
      "name": "Payments",
      "tags": [
        "Payment intents",
        "Refunds",
        "Reversal",
        "Captures"
      ]
    },
    {
      "name": "Notifications",
      "tags": ""
    }
  ],
  "paths": {
    "/payment-intents": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "summary": "Create a payment intent",
        "description": "Creates a payment intent.",
        "operationId": "PaymentIntents_CreatePaymentIntent",
        "requestBody": {
          "x-name": "createPaymentIntentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents',\n  headers: {'content-type': 'application/json'},\n  body: {\n    captureMode: 'Auto',\n    amount: {value: 0, currencyCode: 'string'},\n    reference: 'string',\n    description: 'string',\n    customer: {emailAddress: 'string', phoneNumber: 'string'},\n    billingAddress: {\n      address1: 'string',\n      address2: 'string',\n      address3: 'string',\n      address4: 'string',\n      city: 'London',\n      state: 'string',\n      postcode: 'string',\n      countryCode: 'GB',\n      locality: 'string',\n      county: 'string'\n    },\n    shippingDetails: {\n      name: 'string',\n      deliveryNotes: 'string',\n      address: {\n        address1: 'string',\n        address2: 'string',\n        address3: 'string',\n        address4: 'string',\n        city: 'London',\n        state: 'string',\n        postcode: 'string',\n        countryCode: 'GB',\n        locality: 'string',\n        county: 'string'\n      }\n    },\n    transactionSource: 'MOTO',\n    config: {\n      title: 'string',\n      redirectUrl: 'http://example.com',\n      cancelUrl: 'http://example.com',\n      customerEmail: {collectionRequired: false},\n      details: {showTotal: true, showReference: true},\n      billingAddress: {collectionRequired: true},\n      shippingDetails: {collectionRequired: true},\n      payment: {customAmountAllowed: true, tipsAllowed: true}\n    },\n    requestSecurity: {userAgent: 'string', ipAddress: 'string', device: 'string'},\n    itemLines: [\n      {\n        id: 'string',\n        quantity: 0,\n        caption: 'string',\n        amountTotal: {value: 0, currencyCode: 'string'}\n      }\n    ],\n    taxLines: [\n      {\n        id: 'string',\n        caption: 'string',\n        subCaption: 'string',\n        amountTotal: {value: 0, currencyCode: 'string'}\n      }\n    ],\n    actionLink: {\n      url: 'http://example.com',\n      action: 'DownloadFile',\n      label: 'string',\n      fileName: 'string'\n    },\n    paymentSource: 'string',\n    metadata: {property1: 'string', property2: 'string'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents \\\n  --header 'content-type: application/json' \\\n  --data '{\"captureMode\":\"Auto\",\"amount\":{\"value\":0,\"currencyCode\":\"string\"},\"reference\":\"string\",\"description\":\"string\",\"customer\":{\"emailAddress\":\"string\",\"phoneNumber\":\"string\"},\"billingAddress\":{\"address1\":\"string\",\"address2\":\"string\",\"address3\":\"string\",\"address4\":\"string\",\"city\":\"London\",\"state\":\"string\",\"postcode\":\"string\",\"countryCode\":\"GB\",\"locality\":\"string\",\"county\":\"string\"},\"shippingDetails\":{\"name\":\"string\",\"deliveryNotes\":\"string\",\"address\":{\"address1\":\"string\",\"address2\":\"string\",\"address3\":\"string\",\"address4\":\"string\",\"city\":\"London\",\"state\":\"string\",\"postcode\":\"string\",\"countryCode\":\"GB\",\"locality\":\"string\",\"county\":\"string\"}},\"transactionSource\":\"MOTO\",\"config\":{\"title\":\"string\",\"redirectUrl\":\"http://example.com\",\"cancelUrl\":\"http://example.com\",\"customerEmail\":{\"collectionRequired\":false},\"details\":{\"showTotal\":true,\"showReference\":true},\"billingAddress\":{\"collectionRequired\":true},\"shippingDetails\":{\"collectionRequired\":true},\"payment\":{\"customAmountAllowed\":true,\"tipsAllowed\":true}},\"requestSecurity\":{\"userAgent\":\"string\",\"ipAddress\":\"string\",\"device\":\"string\"},\"itemLines\":[{\"id\":\"string\",\"quantity\":0,\"caption\":\"string\",\"amountTotal\":{\"value\":0,\"currencyCode\":\"string\"}}],\"taxLines\":[{\"id\":\"string\",\"caption\":\"string\",\"subCaption\":\"string\",\"amountTotal\":{\"value\":0,\"currencyCode\":\"string\"}}],\"actionLink\":{\"url\":\"http://example.com\",\"action\":\"DownloadFile\",\"label\":\"string\",\"fileName\":\"string\"},\"paymentSource\":\"string\",\"metadata\":{\"property1\":\"string\",\"property2\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents\"\n\npayload = {\n    \"captureMode\": \"Auto\",\n    \"amount\": {\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n    },\n    \"reference\": \"string\",\n    \"description\": \"string\",\n    \"customer\": {\n        \"emailAddress\": \"string\",\n        \"phoneNumber\": \"string\"\n    },\n    \"billingAddress\": {\n        \"address1\": \"string\",\n        \"address2\": \"string\",\n        \"address3\": \"string\",\n        \"address4\": \"string\",\n        \"city\": \"London\",\n        \"state\": \"string\",\n        \"postcode\": \"string\",\n        \"countryCode\": \"GB\",\n        \"locality\": \"string\",\n        \"county\": \"string\"\n    },\n    \"shippingDetails\": {\n        \"name\": \"string\",\n        \"deliveryNotes\": \"string\",\n        \"address\": {\n            \"address1\": \"string\",\n            \"address2\": \"string\",\n            \"address3\": \"string\",\n            \"address4\": \"string\",\n            \"city\": \"London\",\n            \"state\": \"string\",\n            \"postcode\": \"string\",\n            \"countryCode\": \"GB\",\n            \"locality\": \"string\",\n            \"county\": \"string\"\n        }\n    },\n    \"transactionSource\": \"MOTO\",\n    \"config\": {\n        \"title\": \"string\",\n        \"redirectUrl\": \"http://example.com\",\n        \"cancelUrl\": \"http://example.com\",\n        \"customerEmail\": {\"collectionRequired\": False},\n        \"details\": {\n            \"showTotal\": True,\n            \"showReference\": True\n        },\n        \"billingAddress\": {\"collectionRequired\": True},\n        \"shippingDetails\": {\"collectionRequired\": True},\n        \"payment\": {\n            \"customAmountAllowed\": True,\n            \"tipsAllowed\": True\n        }\n    },\n    \"requestSecurity\": {\n        \"userAgent\": \"string\",\n        \"ipAddress\": \"string\",\n        \"device\": \"string\"\n    },\n    \"itemLines\": [\n        {\n            \"id\": \"string\",\n            \"quantity\": 0,\n            \"caption\": \"string\",\n            \"amountTotal\": {\n                \"value\": 0,\n                \"currencyCode\": \"string\"\n            }\n        }\n    ],\n    \"taxLines\": [\n        {\n            \"id\": \"string\",\n            \"caption\": \"string\",\n            \"subCaption\": \"string\",\n            \"amountTotal\": {\n                \"value\": 0,\n                \"currencyCode\": \"string\"\n            }\n        }\n    ],\n    \"actionLink\": {\n        \"url\": \"http://example.com\",\n        \"action\": \"DownloadFile\",\n        \"label\": \"string\",\n        \"fileName\": \"string\"\n    },\n    \"paymentSource\": \"string\",\n    \"metadata\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n    }\n}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"captureMode\": \"Auto\",\n  \"amount\": {\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  },\n  \"reference\": \"string\",\n  \"description\": \"string\",\n  \"customer\": {\n    \"emailAddress\": \"string\",\n    \"phoneNumber\": \"string\"\n  },\n  \"billingAddress\": {\n    \"address1\": \"string\",\n    \"address2\": \"string\",\n    \"address3\": \"string\",\n    \"address4\": \"string\",\n    \"city\": \"London\",\n    \"state\": \"string\",\n    \"postcode\": \"string\",\n    \"countryCode\": \"GB\",\n    \"locality\": \"string\",\n    \"county\": \"string\"\n  },\n  \"shippingDetails\": {\n    \"name\": \"string\",\n    \"deliveryNotes\": \"string\",\n    \"address\": {\n      \"address1\": \"string\",\n      \"address2\": \"string\",\n      \"address3\": \"string\",\n      \"address4\": \"string\",\n      \"city\": \"London\",\n      \"state\": \"string\",\n      \"postcode\": \"string\",\n      \"countryCode\": \"GB\",\n      \"locality\": \"string\",\n      \"county\": \"string\"\n    }\n  },\n  \"transactionSource\": \"MOTO\",\n  \"config\": {\n    \"title\": \"string\",\n    \"redirectUrl\": \"http://example.com\",\n    \"cancelUrl\": \"http://example.com\",\n    \"customerEmail\": {\n      \"collectionRequired\": false\n    },\n    \"details\": {\n      \"showTotal\": true,\n      \"showReference\": true\n    },\n    \"billingAddress\": {\n      \"collectionRequired\": true\n    },\n    \"shippingDetails\": {\n      \"collectionRequired\": true\n    },\n    \"payment\": {\n      \"customAmountAllowed\": true,\n      \"tipsAllowed\": true\n    }\n  },\n  \"requestSecurity\": {\n    \"userAgent\": \"string\",\n    \"ipAddress\": \"string\",\n    \"device\": \"string\"\n  },\n  \"itemLines\": [\n    {\n      \"id\": \"string\",\n      \"quantity\": 0,\n      \"caption\": \"string\",\n      \"amountTotal\": {\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n      }\n    }\n  ],\n  \"taxLines\": [\n    {\n      \"id\": \"string\",\n      \"caption\": \"string\",\n      \"subCaption\": \"string\",\n      \"amountTotal\": {\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n      }\n    }\n  ],\n  \"actionLink\": {\n    \"url\": \"http://example.com\",\n    \"action\": \"DownloadFile\",\n    \"label\": \"string\",\n    \"fileName\": \"string\"\n  },\n  \"paymentSource\": \"string\",\n  \"metadata\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"captureMode\": \"Auto\",\n  \"amount\": [\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  ],\n  \"reference\": \"string\",\n  \"description\": \"string\",\n  \"customer\": [\n    \"emailAddress\": \"string\",\n    \"phoneNumber\": \"string\"\n  ],\n  \"billingAddress\": [\n    \"address1\": \"string\",\n    \"address2\": \"string\",\n    \"address3\": \"string\",\n    \"address4\": \"string\",\n    \"city\": \"London\",\n    \"state\": \"string\",\n    \"postcode\": \"string\",\n    \"countryCode\": \"GB\",\n    \"locality\": \"string\",\n    \"county\": \"string\"\n  ],\n  \"shippingDetails\": [\n    \"name\": \"string\",\n    \"deliveryNotes\": \"string\",\n    \"address\": [\n      \"address1\": \"string\",\n      \"address2\": \"string\",\n      \"address3\": \"string\",\n      \"address4\": \"string\",\n      \"city\": \"London\",\n      \"state\": \"string\",\n      \"postcode\": \"string\",\n      \"countryCode\": \"GB\",\n      \"locality\": \"string\",\n      \"county\": \"string\"\n    ]\n  ],\n  \"transactionSource\": \"MOTO\",\n  \"config\": [\n    \"title\": \"string\",\n    \"redirectUrl\": \"http://example.com\",\n    \"cancelUrl\": \"http://example.com\",\n    \"customerEmail\": [\"collectionRequired\": false],\n    \"details\": [\n      \"showTotal\": true,\n      \"showReference\": true\n    ],\n    \"billingAddress\": [\"collectionRequired\": true],\n    \"shippingDetails\": [\"collectionRequired\": true],\n    \"payment\": [\n      \"customAmountAllowed\": true,\n      \"tipsAllowed\": true\n    ]\n  ],\n  \"requestSecurity\": [\n    \"userAgent\": \"string\",\n    \"ipAddress\": \"string\",\n    \"device\": \"string\"\n  ],\n  \"itemLines\": [\n    [\n      \"id\": \"string\",\n      \"quantity\": 0,\n      \"caption\": \"string\",\n      \"amountTotal\": [\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n      ]\n    ]\n  ],\n  \"taxLines\": [\n    [\n      \"id\": \"string\",\n      \"caption\": \"string\",\n      \"subCaption\": \"string\",\n      \"amountTotal\": [\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n      ]\n    ]\n  ],\n  \"actionLink\": [\n    \"url\": \"http://example.com\",\n    \"action\": \"DownloadFile\",\n    \"label\": \"string\",\n    \"fileName\": \"string\"\n  ],\n  \"paymentSource\": \"string\",\n  \"metadata\": [\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents\"\n\n\tpayload := strings.NewReader(\"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"captureMode\\\":\\\"Auto\\\",\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"},\\\"reference\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"customer\\\":{\\\"emailAddress\\\":\\\"string\\\",\\\"phoneNumber\\\":\\\"string\\\"},\\\"billingAddress\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"},\\\"shippingDetails\\\":{\\\"name\\\":\\\"string\\\",\\\"deliveryNotes\\\":\\\"string\\\",\\\"address\\\":{\\\"address1\\\":\\\"string\\\",\\\"address2\\\":\\\"string\\\",\\\"address3\\\":\\\"string\\\",\\\"address4\\\":\\\"string\\\",\\\"city\\\":\\\"London\\\",\\\"state\\\":\\\"string\\\",\\\"postcode\\\":\\\"string\\\",\\\"countryCode\\\":\\\"GB\\\",\\\"locality\\\":\\\"string\\\",\\\"county\\\":\\\"string\\\"}},\\\"transactionSource\\\":\\\"MOTO\\\",\\\"config\\\":{\\\"title\\\":\\\"string\\\",\\\"redirectUrl\\\":\\\"http://example.com\\\",\\\"cancelUrl\\\":\\\"http://example.com\\\",\\\"customerEmail\\\":{\\\"collectionRequired\\\":false},\\\"details\\\":{\\\"showTotal\\\":true,\\\"showReference\\\":true},\\\"billingAddress\\\":{\\\"collectionRequired\\\":true},\\\"shippingDetails\\\":{\\\"collectionRequired\\\":true},\\\"payment\\\":{\\\"customAmountAllowed\\\":true,\\\"tipsAllowed\\\":true}},\\\"requestSecurity\\\":{\\\"userAgent\\\":\\\"string\\\",\\\"ipAddress\\\":\\\"string\\\",\\\"device\\\":\\\"string\\\"},\\\"itemLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"quantity\\\":0,\\\"caption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"taxLines\\\":[{\\\"id\\\":\\\"string\\\",\\\"caption\\\":\\\"string\\\",\\\"subCaption\\\":\\\"string\\\",\\\"amountTotal\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}],\\\"actionLink\\\":{\\\"url\\\":\\\"http://example.com\\\",\\\"action\\\":\\\"DownloadFile\\\",\\\"label\\\":\\\"string\\\",\\\"fileName\\\":\\\"string\\\"},\\\"paymentSource\\\":\\\"string\\\",\\\"metadata\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}": {
      "get": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_Get",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the payment intent.\n",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "description": "Creates a payment intent.",
        "summary": "Retrieve a payment intent",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"GET\", \"/payment-intents/%7BpaymentIntentId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\",\n  \"method\": \"GET\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_Delete",
        "parameters": [
          {
            "name": "paymentIntentId",
            "description": "Unique identifier for the payment intent.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "summary": "Cancel a PaymentIntent",
        "description": "Creates a payment intent.",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"DELETE\", \"/payment-intents/%7BpaymentIntentId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/captures": {
      "post": {
        "tags": [
          "Captures"
        ],
        "summary": "Captures a payment",
        "description": "Captures a payment intent that has previously been created but not yet refunded or reversed. You can capture the full amount or a partial amount.",
        "operationId": "Captures_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaptureRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCaptureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"amount\\\":0}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/captures\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures',\n  headers: {'content-type': 'application/json'},\n  body: {amount: 0},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures \\\n  --header 'content-type: application/json' \\\n  --data '{\"amount\":0}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"amount\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"amount\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\"\n\npayload = {\"amount\": 0}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"amount\\\":0}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"amount\": 0\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\"amount\": 0] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"amount\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\"\n\n\tpayload := strings.NewReader(\"{\\\"amount\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/captures\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"amount\\\":0}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/refresh-token": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_RefreshPaymentIntentToken",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the payment intent.\n",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "summary": "Update a token",
        "description": "Updates a token.",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/refresh-token\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\"\n\nresponse = requests.request(\"POST\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\",\n  \"method\": \"POST\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refresh-token\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/status": {
      "get": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_GetPaymentIntentStatus",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the payment intent.\n",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "description": "Retrieves the status of a previously created payment intent.",
        "summary": "Retrieve a status",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"GET\", \"/payment-intents/%7BpaymentIntentId%7D/status\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\",\n  \"method\": \"GET\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/status\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/search": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_Search",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchPaymentIntentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "parameters": [],
        "summary": "List all payment intents",
        "description": "Retrieves a list of payment intents.\nResults are paginated, by default the method returns only up to 50 payment intents.",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents/search\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/search',\n  headers: {'content-type': 'application/json'},\n  body: {\n    locationId: 'string',\n    paymentSource: 'string',\n    statuses: ['Created'],\n    startDate: '2019-08-24T14:15:22Z',\n    endDate: '2019-08-24T14:15:22Z',\n    cursor: {limit: 20, before: 'string', after: 'string'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/search \\\n  --header 'content-type: application/json' \\\n  --data '{\"locationId\":\"string\",\"paymentSource\":\"string\",\"statuses\":[\"Created\"],\"startDate\":\"2019-08-24T14:15:22Z\",\"endDate\":\"2019-08-24T14:15:22Z\",\"cursor\":{\"limit\":20,\"before\":\"string\",\"after\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/search\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/search\"\n\npayload = {\n    \"locationId\": \"string\",\n    \"paymentSource\": \"string\",\n    \"statuses\": [\"Created\"],\n    \"startDate\": \"2019-08-24T14:15:22Z\",\n    \"endDate\": \"2019-08-24T14:15:22Z\",\n    \"cursor\": {\n        \"limit\": 20,\n        \"before\": \"string\",\n        \"after\": \"string\"\n    }\n}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/search\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"locationId\": \"string\",\n  \"paymentSource\": \"string\",\n  \"statuses\": [\n    \"Created\"\n  ],\n  \"startDate\": \"2019-08-24T14:15:22Z\",\n  \"endDate\": \"2019-08-24T14:15:22Z\",\n  \"cursor\": {\n    \"limit\": 20,\n    \"before\": \"string\",\n    \"after\": \"string\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/search\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"locationId\": \"string\",\n  \"paymentSource\": \"string\",\n  \"statuses\": [\"Created\"],\n  \"startDate\": \"2019-08-24T14:15:22Z\",\n  \"endDate\": \"2019-08-24T14:15:22Z\",\n  \"cursor\": [\n    \"limit\": 20,\n    \"before\": \"string\",\n    \"after\": \"string\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/search\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/search\"\n\n\tpayload := strings.NewReader(\"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/search\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"locationId\\\":\\\"string\\\",\\\"paymentSource\\\":\\\"string\\\",\\\"statuses\\\":[\\\"Created\\\"],\\\"startDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"endDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"cursor\\\":{\\\"limit\\\":20,\\\"before\\\":\\\"string\\\",\\\"after\\\":\\\"string\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/tips-amount": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_SetTipsAmount",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTipsAmountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "summary": "Change tips amount",
        "description": "Changes tips amount for a payment intent. Available only if you allowed tips when creating this payment intent.",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/tips-amount\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount',\n  headers: {'content-type': 'application/json'},\n  body: {tipsAmount: {value: 0, currencyCode: 'string'}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount \\\n  --header 'content-type: application/json' \\\n  --data '{\"tipsAmount\":{\"value\":0,\"currencyCode\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\"\n\npayload = {\"tipsAmount\": {\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n    }}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"tipsAmount\": {\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\"tipsAmount\": [\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\"\n\n\tpayload := strings.NewReader(\"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/tips-amount\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"tipsAmount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/amount": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "operationId": "PaymentIntents_SetCustomAmount",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAmountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "summary": "Change a payment intent amount",
        "description": "Changes the amount for a payment intent. Available only if you allowed the amount changes when creating this payment intent.",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/amount\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount',\n  headers: {'content-type': 'application/json'},\n  body: {amount: {value: 0, currencyCode: 'string'}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount \\\n  --header 'content-type: application/json' \\\n  --data '{\"amount\":{\"value\":0,\"currencyCode\":\"string\"}}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\"\n\npayload = {\"amount\": {\n        \"value\": 0,\n        \"currencyCode\": \"string\"\n    }}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"amount\": {\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\"amount\": [\n    \"value\": 0,\n    \"currencyCode\": \"string\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\"\n\n\tpayload := strings.NewReader(\"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/amount\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"amount\\\":{\\\"value\\\":0,\\\"currencyCode\\\":\\\"string\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/receipt": {
      "post": {
        "tags": [
          "Payment intents"
        ],
        "summary": "Send a receipt",
        "description": "Sends a receipt to the email addresses you specified.",
        "operationId": "Receipt_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Payment receipt requested successfully."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailReceiptRequest"
              }
            }
          },
          "description": ""
        },
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"emails\\\":[\\\"string\\\"]}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/receipt\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt',\n  headers: {'content-type': 'application/json'},\n  body: {emails: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt \\\n  --header 'content-type: application/json' \\\n  --data '{\"emails\":[\"string\"]}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"emails\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"emails\\\":[\\\"string\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\"\n\npayload = {\"emails\": [\"string\"]}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"emails\\\":[\\\"string\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"emails\": [\n    \"string\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\"emails\": [\"string\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"emails\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\"\n\n\tpayload := strings.NewReader(\"{\\\"emails\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/receipt\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"emails\\\":[\\\"string\\\"]}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "paymentIntentId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/payment-intents/{paymentIntentId}/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Create a refund",
        "description": "Creates a refund. Refund allows you to return a payment that has previously been created but not yet refunded. You can refund the full amount or a partial amount.",
        "operationId": "Refunds_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "idempotencyKey",
            "x-originalName": "idempotencyKey",
            "in": "header",
            "required": true,
            "description": "An optional idempotency key to recognize subsequent retries of the same request. How you generate the idempotency key is up to you. Must be unique for each new refund for the payment intent.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "createRefundRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 3,
          "description": ""
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\npayload = \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'idempotencyKey': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/refunds\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds',\n  headers: {'content-type': 'application/json', idempotencyKey: 'SOME_STRING_VALUE'},\n  body: {amount: 100, refundReason: 'Duplicate transaction', notes: 'notes'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds \\\n  --header 'content-type: application/json' \\\n  --header 'idempotencyKey: SOME_STRING_VALUE' \\\n  --data '{\"amount\":100,\"refundReason\":\"Duplicate transaction\",\"notes\":\"notes\"}'"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\",\n    \"idempotencyKey: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"idempotencyKey\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\"\n\npayload = {\n    \"amount\": 100,\n    \"refundReason\": \"Duplicate transaction\",\n    \"notes\": \"notes\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"idempotencyKey\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"idempotencyKey\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"amount\": 100,\n  \"refundReason\": \"Duplicate transaction\",\n  \"notes\": \"notes\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"idempotencyKey\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"idempotencyKey\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"amount\": 100,\n  \"refundReason\": \"Duplicate transaction\",\n  \"notes\": \"notes\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"idempotencyKey\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\"\n\n\tpayload := strings.NewReader(\"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"idempotencyKey\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/refunds\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"idempotencyKey: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"amount\\\":100,\\\"refundReason\\\":\\\"Duplicate transaction\\\",\\\"notes\\\":\\\"notes\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/refunds/{refundId}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "PaymentIntents_GetRefundById",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the refund.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "description": "Retrieves the details of a refund that has previously been created.",
        "summary": "Retrieve a refund",
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"GET\", \"/payment-intents/refunds/%7BrefundId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\",\n  \"method\": \"GET\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/refunds/%7BrefundId%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/payment-intents/{paymentIntentId}/reversal": {
      "post": {
        "tags": [
          "Reversal"
        ],
        "summary": "Create a reversal",
        "description": "Reverses a payment intent.",
        "operationId": "Reversal_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.\n",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReversalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [],
        "x-codeSamples": [
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.dojo.tech\")\n\nconn.request(\"POST\", \"/payment-intents/%7BpaymentIntentId%7D/reversal\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\"\n\nresponse = requests.request(\"POST\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\",\n  \"method\": \"POST\",\n  \"headers\": {}\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\");\n\nxhr.send(data);"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://api.dojo.tech/payment-intents/%7BpaymentIntentId%7D/reversal\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {},
    "schemas": {
      "CaptureMode": {
        "type": "string",
        "title": "CaptureMode",
        "x-enumNames": [
          "Auto",
          "Manual"
        ],
        "enum": [
          "Auto",
          "Manual"
        ],
        "description": "The type of capture for the payment.",
        "default": "Auto"
      },
      "Money": {
        "title": "Money",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The amount in the minor unit, for example \"100\" for 1.00 GBP.",
            "format": "int64"
          },
          "currencyCode": {
            "type": "string",
            "description": "Three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217).",
            "minLength": 1
          }
        },
        "required": [
          "value",
          "currencyCode"
        ]
      },
      "Customer": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The customer's phone number.",
            "nullable": true
          }
        },
        "description": "Details about the customer.",
        "title": "Customer"
      },
      "Address": {
        "type": "object",
        "additionalProperties": false,
        "x-examples": {
          "example": {
            "value": {
              "address1": "The Brunel Building",
              "address2": "2 Canalside Walk",
              "address3": "",
              "address4": "",
              "city": "London",
              "state": "",
              "postcode": "W2 1DG",
              "countryCode": "GB",
              "locality": "",
              "county": "UK"
            }
          }
        },
        "description": "Details about the address.",
        "properties": {
          "address1": {
            "type": "string",
            "description": "Address line 1 (for example, company name).",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "Address line 2 (for example, street, apartment, or suite).",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "description": "Address line 3.",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "description": "Address line 4.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City, town, district, suburb, or village.",
            "example": "London",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "description": "ZIP or postal code.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": " Two-letter country code in [ISO 3166-1-alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
            "example": "GB",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "description": "Locality, can use in addition to city.",
            "nullable": true
          },
          "county": {
            "type": "string",
            "description": "County or zone.",
            "nullable": true
          }
        },
        "title": "Address"
      },
      "ShippingDetails": {
        "type": "object",
        "title": "ShippingDetails",
        "additionalProperties": false,
        "description": "Details about the shipping.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the customer.",
            "nullable": true
          },
          "deliveryNotes": {
            "type": "string",
            "description": "The delivery notes.",
            "nullable": true
          },
          "address": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Details about the address."
          }
        }
      },
      "TransactionSource": {
        "type": "string",
        "description": "`MOTO` if the source of the transaction is mail or phone. Otherwise, this field is null.",
        "x-enumNames": [
          "MOTO"
        ],
        "enum": [
          "MOTO"
        ],
        "title": "TransactionSource"
      },
      "PaymentIntentConfigUserEmail": {
        "type": "object",
        "additionalProperties": false,
        "title": "PaymentIntentConfigUserEmail",
        "description": "",
        "properties": {
          "collectionRequired": {
            "type": "boolean",
            "description": "If has the value `true` the object will be collected.",
            "default": false
          }
        }
      },
      "PaymentIntentConfigDetails": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "showTotal": {
            "type": "boolean",
            "description": "If has the value `true` the total will be showed."
          },
          "showReference": {
            "type": "boolean",
            "description": "If has the value true the order id  will be showed."
          }
        }
      },
      "PaymentIntentConfigBillingAddress": {
        "type": "object",
        "title": "PaymentIntentConfigBillingAddress",
        "additionalProperties": false,
        "properties": {
          "collectionRequired": {
            "type": "boolean",
            "description": "If has the value `true` the object will be collected."
          }
        }
      },
      "PaymentIntentConfigShippingDetails": {
        "type": "object",
        "title": "PaymentIntentConfigShippingDetails",
        "additionalProperties": false,
        "properties": {
          "collectionRequired": {
            "type": "boolean",
            "description": "If has the value `true` the object will be collected."
          }
        }
      },
      "PaymentConfigDetails": {
        "type": "object",
        "additionalProperties": false,
        "title": "PaymentConfigDetails",
        "properties": {
          "customAmountAllowed": {
            "type": "boolean",
            "description": "If has the value `true` the amount of the payment intent can be changed."
          },
          "tipsAllowed": {
            "type": "boolean",
            "description": "If has the value `true` tips are allowed."
          }
        }
      },
      "PaymentIntentConfig": {
        "type": "object",
        "additionalProperties": false,
        "description": "Details about the payment intent configurations.",
        "title": "PaymentIntentConfig",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the payment intent.",
            "nullable": true
          },
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to after the payment.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to when canceling the payment.",
            "nullable": true
          },
          "customerEmail": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfigUserEmail"
              }
            ],
            "description": "Configuration of the client's email address."
          },
          "details": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfigDetails"
              }
            ],
            "description": " "
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfigBillingAddress"
              }
            ],
            "description": "Configuration of the billing address."
          },
          "shippingDetails": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfigShippingDetails"
              }
            ],
            "description": " Configuration of the shipping details."
          },
          "payment": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentConfigDetails"
              }
            ],
            "description": "Configuration of the payment."
          }
        }
      },
      "RequestSecurity": {
        "type": "object",
        "additionalProperties": false,
        "title": "RequestSecurity",
        "description": "Customer's device information.",
        "properties": {
          "userAgent": {
            "type": "string",
            "description": "The customer's browser agent.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "The customer's device IP address.",
            "nullable": true
          },
          "device": {
            "type": "string",
            "description": "The customer's device type.",
            "nullable": true
          }
        }
      },
      "ItemLine": {
        "type": "object",
        "title": "ItemLine",
        "additionalProperties": false,
        "description": "The item line object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of items being purchased."
          },
          "caption": {
            "type": "string",
            "description": "A name of the item.",
            "nullable": true
          },
          "amountTotal": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The total amount before applying discounts and taxes."
          }
        }
      },
      "TaxLine": {
        "type": "object",
        "title": "TaxLine",
        "additionalProperties": false,
        "description": "The tax line object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object.",
            "nullable": true
          },
          "caption": {
            "type": "string",
            "description": "A name of the tax.",
            "nullable": true
          },
          "subCaption": {
            "type": "string",
            "description": "A subname of the tax.",
            "nullable": true
          },
          "amountTotal": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Total amout of taxes."
          }
        }
      },
      "ActionType": {
        "type": "string",
        "title": "ActionType",
        "x-enumNames": [
          "OpenLink",
          "DownloadFile"
        ],
        "description": "The type of action associated with the link.",
        "enum": [
          "DownloadFile",
          "OpenLink"
        ],
        "default": "OpenLink"
      },
      "ActionLink": {
        "type": "object",
        "title": "ActionLink",
        "additionalProperties": false,
        "description": "The link to the payment's associated actions.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 1,
            "description": "The link URL."
          },
          "action": {
            "$ref": "#/components/schemas/ActionType"
          },
          "label": {
            "type": "string",
            "minLength": 1,
            "description": "Custom label given to the action."
          },
          "fileName": {
            "type": "string",
            "description": "Filename of the document.",
            "nullable": true
          }
        },
        "required": [
          "url",
          "label"
        ]
      },
      "CreatePaymentIntentRequest": {
        "type": "object",
        "description": "The payment intent request object.",
        "additionalProperties": false,
        "title": "CreatePaymentIntentRequest",
        "properties": {
          "captureMode": {
            "description": "The type of capture for the payment.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CaptureMode"
              }
            ]
          },
          "amount": {
            "description": "The amount intended to be collected by this payment intent.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "description": "Details of the reference for the payment."
          },
          "description": {
            "type": "string",
            "description": "The payment description.",
            "nullable": true
          },
          "customer": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ],
            "description": "Details about the customer."
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the invoice."
          },
          "shippingDetails": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShippingDetails"
              }
            ],
            "description": "The address where to send the order."
          },
          "transactionSource": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionSource"
              }
            ],
            "description": "Information regarding the transaction source type."
          },
          "config": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfig"
              }
            ],
            "description": "Details about the payment intent configuration."
          },
          "requestSecurity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequestSecurity"
              }
            ],
            "description": "Customer's device information."
          },
          "itemLines": {
            "type": "array",
            "description": "The line items purchased by the customer.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItemLine"
            }
          },
          "taxLines": {
            "type": "array",
            "description": "The taxes applied to the items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TaxLine"
            }
          },
          "actionLink": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActionLink"
              }
            ],
            "description": "The link to the payment's associated actions."
          },
          "paymentSource": {
            "type": "string",
            "description": "Information regarding the payment source type.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of key-value pairs that you can use for storing additional information.",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "reference"
        ]
      },
      "PaymentDetails": {
        "type": "object",
        "additionalProperties": false,
        "description": "The payment details object.",
        "title": "PaymentDetails",
        "properties": {
          "transactionDateTime": {
            "type": "string",
            "description": "The date and time of the payment in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The description of the operation.",
            "nullable": true
          },
          "authCode": {
            "type": "string",
            "description": "The acquirer authorization code.",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "description": "The card number.",
            "nullable": true
          },
          "cardName": {
            "type": "string",
            "description": "The name of the cardholder.",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry month and year. Format: MM/YY.",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "description": "The card scheme.",
            "nullable": true
          }
        }
      },
      "PaymentIntentStatus": {
        "type": "string",
        "description": "Current status of the payment intent.",
        "x-enumNames": [
          "Created",
          "Authorized",
          "Captured",
          "Reversed",
          "Refunded",
          "Canceled"
        ],
        "title": "PaymentIntentStatus",
        "x-examples": {},
        "enum": [
          "Created",
          "Authorized",
          "Captured",
          "Reversed",
          "Refunded",
          "Canceled"
        ]
      },
      "PaymentMethod": {
        "type": "string",
        "description": "The payment methods that customers can use to pay.",
        "x-enumNames": [
          "Card",
          "Wallet"
        ],
        "enum": [
          "Card",
          "Wallet"
        ]
      },
      "PaymentIntentResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The PaymentIntentResponse object.",
        "title": "PaymentIntentResponse",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment intent.\n",
            "nullable": true
          },
          "captureMode": {
            "$ref": "#/components/schemas/CaptureMode"
          },
          "transactionSource": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionSource"
              }
            ],
            "description": "Information regarding the transaction source type."
          },
          "connecteToken": {
            "type": "string",
            "description": "The Connect-e token.",
            "nullable": true
          },
          "connecteTokenExpirationDate": {
            "type": "string",
            "description": "The date that the Connect-e token will expire.",
            "format": "date-time"
          },
          "paymentDetails": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentDetails"
              }
            ],
            "description": "Details about the payment."
          },
          "status": {
            "$ref": "#/components/schemas/PaymentIntentStatus"
          },
          "paymentMethods": {
            "type": "array",
            "description": "The payment methods that customers can use to pay.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The amount intended to be collected by this payment intent."
          },
          "tipsAmount": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The tips amount."
          },
          "requestedAmount": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The amount that was requested by this Payment intent."
          },
          "totalAmount": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The total amount after applying discounts and taxes."
          },
          "customer": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ],
            "description": "Details about the customer."
          },
          "requestSecurity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequestSecurity"
              }
            ],
            "description": "Customer's device information."
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the invoice."
          },
          "shippingDetails": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ShippingDetails"
              }
            ],
            "description": "The address where to send the order."
          },
          "reference": {
            "type": "string",
            "description": "Details of the reference for the payment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payment description.",
            "nullable": true
          },
          "subtotalLineItems": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The total amount after applying discounts and taxes."
          },
          "itemLines": {
            "type": "array",
            "description": "The line items purchased by the customer.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItemLine"
            }
          },
          "taxLines": {
            "type": "array",
            "description": "The taxes applied to the items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TaxLine"
            }
          },
          "actionLink": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActionLink"
              }
            ],
            "description": "The link to the payment's associated actions."
          },
          "config": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfig"
              }
            ],
            "description": "Details about the payment intent configuration."
          },
          "paymentSource": {
            "type": "string",
            "description": "Information regarding the payment source type.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of key-value pairs that you can use for storing additional information.",
            "nullable": true
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "title": "ProblemDetails",
        "description": "",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "properties": {
              "": {
                "type": "string"
              }
            }
          }
        }
      },
      "CreateCaptureRequest": {
        "type": "object",
        "description": "The capture request object.",
        "additionalProperties": false,
        "title": "CreateCaptureRequest",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to capture. You can capture the full amount or a partial amount.",
            "format": "int64"
          }
        },
        "required": [
          "amount"
        ]
      },
      "CaptureStatus": {
        "title": "CaptureStatus",
        "type": "string",
        "description": "Current capture status.",
        "x-enumNames": [
          "Created",
          "Successful",
          "Failed"
        ],
        "enum": [
          "Created",
          "Successful",
          "Failed"
        ]
      },
      "CreateCaptureResponse": {
        "type": "object",
        "description": "The capture response object.",
        "additionalProperties": false,
        "title": "CreateCaptureResponse",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CaptureStatus"
          },
          "message": {
            "type": "string",
            "description": "The description of the operation.",
            "nullable": true
          },
          "captureId": {
            "type": "string",
            "description": "Unique identifier for the capture.",
            "nullable": true
          }
        }
      },
      "Cursor": {
        "type": "object",
        "additionalProperties": false,
        "description": "A cursor for use in pagination. ",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "example": 20,
            "default": 50,
            "description": "The maximum number of results to be returned in a single page."
          },
          "before": {
            "type": "string",
            "description": "A cursor for use in pagination for the previous page. `before` and `after` are mutually exclusive - only one of these may be used.",
            "nullable": true
          },
          "after": {
            "type": "string",
            "description": "A cursor for use in pagination for the next page. `before` and `after` are mutually exclusive - only one of these may be used.",
            "nullable": true
          }
        }
      },
      "SearchPaymentIntentRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "properties": {
          "locationId": {
            "type": "string",
            "minLength": 1,
            "description": "Unique identifier for the location."
          },
          "paymentSource": {
            "type": "string",
            "description": "Information regarding the payment source type.",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "description": "Statuses of payment intents.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentIntentStatus"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time from which to search in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time until which to search in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).",
            "nullable": true
          },
          "cursor": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Cursor"
              }
            ],
            "description": "A cursor for use in pagination. "
          }
        },
        "required": [
          "locationId"
        ]
      },
      "PagedResultOfPaymentIntentResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "nullable": true,
            "description": " ",
            "items": {
              "$ref": "#/components/schemas/PaymentIntentResponse"
            }
          },
          "before": {
            "type": "string",
            "description": "A cursor for use in pagination for the previous page. `before` and `after` are mutually exclusive - only one of these may be used.",
            "nullable": true
          },
          "after": {
            "type": "string",
            "description": "A cursor for use in pagination for the next page. `before` and `after` are mutually exclusive - only one of these may be used.",
            "nullable": true
          }
        }
      },
      "PagedPaymentIntentResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedResultOfPaymentIntentResponse"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SetTipsAmountRequest": {
        "description": "The tips amount.",
        "type": "object",
        "properties": {
          "tipsAmount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The tips amount."
          }
        },
        "required": [
          "tipsAmount"
        ]
      },
      "SetAmountRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "properties": {
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The amount intended to be collected by this payment intent."
          }
        },
        "required": [
          "amount"
        ]
      },
      "EmailReceiptRequest": {
        "title": "EmailReceiptRequest",
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "description": "The list of email addresses to which the receipt should be sent.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "emails"
        ],
        "description": ""
      },
      "CreateRefundRequest": {
        "type": "object",
        "description": "The create refund request object.",
        "example": {
          "amount": 100,
          "refundReason": "Duplicate transaction",
          "notes": "notes"
        },
        "additionalProperties": false,
        "title": "CreateRefundRequest",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The refund amount.",
            "format": "int64"
          },
          "previousTransactionId": {
            "type": "string",
            "description": "Unique identifier for the previous transaction.",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "description": "The reason for the refund.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The description of the refund.",
            "nullable": true
          }
        },
        "required": [
          "amount"
        ]
      },
      "RefundStatus": {
        "type": "string",
        "title": "RefundStatus",
        "enum": [
          "Created",
          "Successful",
          "Failed"
        ],
        "x-enumNames": [
          "Created",
          "Successful",
          "Failed"
        ],
        "description": "Current refund status."
      },
      "CreateRefundResponse": {
        "type": "object",
        "description": "The create refund response object.",
        "additionalProperties": false,
        "title": "CreateRefundResponse",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "message": {
            "type": "string",
            "description": "The description of the operation.",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Unique identifier for the refund.",
            "nullable": true
          }
        }
      },
      "RefundResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paymentIntentId": {
            "type": "string",
            "description": "Unique identifier for the payment intent.\n",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Unique identifier for the refund.",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "description": "The reason for the refund.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The description of the refund.",
            "nullable": true
          }
        },
        "description": "The refund response object.",
        "title": "RefundResponse"
      },
      "ReversalStatus": {
        "type": "string",
        "title": "ReversalStatus",
        "enum": [
          "Created",
          "Successful",
          "Failed"
        ],
        "x-enumNames": [
          "Created",
          "Successful",
          "Failed"
        ],
        "description": "Current reversal status."
      },
      "CreateReversalResponse": {
        "type": "object",
        "description": "The create reversal response object.",
        "additionalProperties": false,
        "title": "CreateReversalResponse",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReversalStatus"
          },
          "message": {
            "type": "string",
            "description": "The description of the operation.",
            "nullable": true
          },
          "reversalId": {
            "type": "string",
            "description": "Unique identifier for the reversal.",
            "nullable": true
          }
        }
      }
    }
  }
}