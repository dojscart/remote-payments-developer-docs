{
  "x-generator": "NSwag v13.12.1.0 (NJsonSchema v10.4.6.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Payment Service",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://remote-payments-internal-gateway-dev.dojo.dev/cx-1920"
    }
  ],
  "paths": {
    "/api/payment-intents/{paymentIntentId}/collections": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection",
        "description": "The method allows you to collect a pre-auth payment intent that has previously been created but not yet refunded or reversed. You can collect the full amount or a partial amount.",
        "operationId": "Collections_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Returns the CreateCollectionResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "If bad request",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "If unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "If conflicted",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "If internal server error",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/payment-intents/{paymentId}": {
      "get": {
        "tags": [
          "PaymentIntents"
        ],
        "operationId": "PaymentIntents_Get",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Unique identifier for the payment intent.",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentIntent object. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Retrieves the details of a payment intent. Supply the unique payment ID from either a payment intent creation request.",
        "summary": "Retrieve a payment intent"
      }
    },
    "/api/payment-intents": {
      "post": {
        "tags": [
          "PaymentIntents"
        ],
        "summary": "Create a payment intent",
        "description": "A Payment Intent is the process of collecting a payment from a customer.",
        "operationId": "PaymentIntents_CreatePaymentIntent",
        "requestBody": {
          "x-name": "createPaymentIntentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Returns the PaymentIntent object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          },
          "400": {
            "description": "If bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/payment-intents/{paymentId}/refresh-token": {
      "post": {
        "tags": [
          "PaymentIntents"
        ],
        "operationId": "PaymentIntents_RefreshPaymentIntentToken",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Unique identifier for the payment intent.",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentIntent object. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Update a token",
        "description": "Updates a token."
      }
    },
    "/api/payment-intents/{paymentId}/status": {
      "get": {
        "tags": [
          "PaymentIntents"
        ],
        "operationId": "PaymentIntents_GetPaymentIntentStatus",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Unique identifier for the payment intent.",
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentIntent object. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntent"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Retrieves a status of the payment intent that has previously been created.",
        "summary": "Retrieve a status"
      }
    },
    "/api/payment-intents/refunds/{refundId}": {
      "get": {
        "tags": [
          "PaymentIntents"
        ],
        "operationId": "PaymentIntents_GetRefundById",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the RefundResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Retrieves the details of the refund that has previously been created.",
        "summary": "Retrieve a refund"
      }
    },
    "/api/payment-intents/{paymentIntentId}/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Create a refund",
        "description": "The method allows you to return a payment that has previously been created but not yet refunded. Payments that have been pre-authorized, but not collected, cannot be refunded.\nYou can refund the full amount or a partial amount.",
        "operationId": "Refunds_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "idempotencyKey",
            "in": "header",
            "description": "An optional idempotency key to recognize subsequent retries of the same request. How you generate the idempotency key is up to you. Must be unique for each new refund for the payment intent.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "createRefundRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 3,
          "description": ""
        },
        "responses": {
          "200": {
            "description": "Returns the CreateRefundResponse object if the refund succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "If bad request",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "If unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "If internal server error",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/payment-intents/{paymentIntentId}/reversal": {
      "post": {
        "tags": [
          "Reversal"
        ],
        "summary": "Create a reversal",
        "description": "Reversal allows to cancel a sale or pre-auth transaction.",
        "operationId": "Reversal_Create",
        "parameters": [
          {
            "name": "paymentIntentId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the payment intent.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Reversal object if the reversal succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReversalResponse"
                }
              }
            }
          },
          "400": {
            "description": "If bad request",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "If unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "If conflicted",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "If internal server error",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateCollectionResponse": {
        "type": "object",
        "description": "The collection response object.",
        "example": {
          "statusCode": "Successful",
          "message": null,
          "crossReference": "f3a72807-6502-4e3d-8374-c3c451257d91",
          "collectionId": "cl_127usj"
        },
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "The status of the collection. \n\nPossible values: Successful, Referred, Declined, Duplicate, Failed.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The description of the collection.",
            "nullable": true
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "collectionId": {
            "type": "string",
            "description": "Unique identifier for the collection.",
            "nullable": true
          }
        },
        "title": "CreateCollectionResponse"
      },
      "CreateCollectionRequest": {
        "type": "object",
        "description": "The collection request object.",
        "example": {
          "amount": 100,
          "currencyCode": "GBP"
        },
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount in the minor unit, for example \"100\" for 1.00 GBP.",
            "format": "int64"
          },
          "currencyCode": {
            "type": "string",
            "description": "Three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217).",
            "minLength": 1
          }
        },
        "required": [
          "amount",
          "currencyCode"
        ],
        "title": "CreateCollectionRequest"
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        },
        "title": "ProblemDetails",
        "description": ""
      },
      "PaymentIntent": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment intent.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "transactionSource": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionSource"
              }
            ]
          },
          "connecteToken": {
            "type": "string",
            "description": "The Connecte token.",
            "nullable": true
          },
          "connecteTokenExpirationDate": {
            "type": "string",
            "description": "The date that the Connecte token will expire.",
            "format": "date-time"
          },
          "status": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ]
          },
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to after the payment.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to when cancelling the payment.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount in the minor unit, for example \"100\" for 1.00 GBP."
          },
          "currencyCode": {
            "type": "string",
            "description": "Three-digit currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217).",
            "nullable": true
          },
          "order": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ],
            "description": "Details about the order."
          },
          "user": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "Details about the use."
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the invoice."
          },
          "shippingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the order."
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "config": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfig"
              }
            ]
          }
        },
        "description": "The payment intent object.",
        "title": "PaymentIntent"
      },
      "PaymentType": {
        "type": "integer",
        "description": "Defines a payment type. Possible values:\n\n* `0` - Sale.\n* `1` - Refund.\n* `2` - PreAuth.\n* `3` - Collection.\n* `4` - Void.\n* `5` - Reversal.",
        "x-enumNames": [
          "Sale",
          "Refund",
          "PreAuth",
          "Collection",
          "Void",
          "Reversal"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "title": "PaymentType"
      },
      "TransactionSource": {
        "type": "integer",
        "description": "`0` if the source of the transaction is MOTO (vai mail or over the phone). Otherwise, this field is null.",
        "x-enumNames": [
          "MOTO"
        ],
        "enum": [
          0
        ],
        "title": "TransactionSource"
      },
      "PaymentStatus": {
        "type": "object",
        "additionalProperties": false,
        "description": "The payment status object.",
        "title": "PaymentStatus",
        "properties": {
          "transactionDateTime": {
            "type": "string",
            "description": "The date and time of the payment in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).",
            "nullable": true
          },
          "statusCode": {
            "$ref": "#/components/schemas/PaymentStatusCode"
          },
          "message": {
            "type": "string",
            "description": "The description of the payment.",
            "nullable": true
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "authCode": {
            "type": "string",
            "description": "The acquirer authorization code.",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "description": "The card number.",
            "nullable": true
          },
          "cardName": {
            "type": "string",
            "description": "The name of the cardholder.",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry month and year. Format: MM/YY.",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "description": "The card scheme.",
            "nullable": true
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the invoice."
          },
          "userEmailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "nullable": true
          },
          "isFinalStatus": {
            "type": "boolean",
            "description": "`true` if this is one of the statuses: Successful, Referred, or Duplicate Transaction. "
          }
        }
      },
      "PaymentStatusCode": {
        "type": "integer",
        "description": "The current status of the payment. Possible values:\n\n* `0` - Successful.\n* `3` - Authorizing.\n* `4` - Referred.\n* `5` - Declined.\n* `20` - Duplicate Transaction.\n* `30` - Failed.",
        "x-enumNames": [
          "Successful",
          "AuthorizationRequired",
          "Referred",
          "Declined",
          "Duplicate",
          "Failed"
        ],
        "enum": [
          0,
          3,
          4,
          5,
          20,
          30
        ],
        "title": "PaymentStatusCode"
      },
      "Address": {
        "type": "object",
        "additionalProperties": false,
        "x-examples": {
          "example": {
            "value": {
              "address1": "The Brunel Building",
              "address2": "2 Canalside Walk",
              "address3": "",
              "address4": "",
              "city": "London",
              "state": "",
              "postcode": "W2 1DG",
              "countryCode": "GB",
              "locality": "",
              "county": "UK"
            }
          }
        },
        "description": "Details about the address.",
        "properties": {
          "address1": {
            "type": "string",
            "description": "Address line 1 (for example, company name).",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "Address line 2 (for example, street, apartment, or suite).",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "description": "Address line 3.",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "description": "Address line 4.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City, town, district, suburb, or village.",
            "example": "London",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State, province, or region.",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "description": "ZIP or postal code.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Two-letter country code in [ISO 3166-1-alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
            "example": "GB",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "description": "Locality, can use in addition to city.",
            "nullable": true
          },
          "county": {
            "type": "string",
            "description": "County or zone.",
            "nullable": true
          }
        },
        "title": "Address"
      },
      "Order": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the order.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the order for the customer.",
            "nullable": true
          }
        },
        "description": "Details about the order.",
        "title": "Order"
      },
      "User": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The customer's phone number.",
            "nullable": true
          }
        },
        "description": "Details about the user.",
        "title": "User"
      },
      "PaymentIntentConfig": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userEmail": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfigUserEmail"
              }
            ]
          }
        },
        "description": "",
        "title": "PaymentIntentConfig"
      },
      "PaymentIntentConfigUserEmail": {
        "type": "object",
        "additionalProperties": false,
        "title": "PaymentIntentConfigUserEmail",
        "properties": {
          "collectionRequired": {
            "type": "boolean",
            "description": "Whether the object will be collected."
          }
        }
      },
      "CreatePaymentIntentRequest": {
        "type": "object",
        "description": "The payment intent request object.",
        "example": {
          "locationId": "66666",
          "type": "SALE",
          "amount": "8000",
          "currencyCode": "826",
          "order": {
            "id": "O-00001"
          }
        },
        "additionalProperties": false,
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Unique identifier for the location.",
            "minLength": 1
          },
          "customerId": {
            "type": "string",
            "description": "Unique identifier for the merchant.",
            "nullable": true
          },
          "remoteId": {
            "type": "string",
            "description": "Unique identifier for the virtual terminal.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "SALE",
              "PREAUTH"
            ],
            "description": "The type of the payment.",
            "minLength": 1
          },
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to after the payment.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the customer will be directed to when cancelling the payment.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount in the minor unit, for example \"100\" for 1.00 GBP.",
            "format": "int64"
          },
          "currencyCode": {
            "type": "string",
            "description": "Three-digit currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217).",
            "minLength": 1
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "user": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "Details about the user."
          },
          "userAgent": {
            "type": "string",
            "description": "The customer's browser agent.",
            "nullable": true
          },
          "userIpAddress": {
            "type": "string",
            "description": "The customer's device IP address.",
            "nullable": true
          },
          "billingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the invoice."
          },
          "shippingAddress": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address where to send the order."
          },
          "isNewTransaction": {
            "type": "boolean"
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "transactionSource": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionSource"
              }
            ]
          },
          "config": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentConfig"
              }
            ]
          }
        },
        "required": [
          "locationId",
          "type",
          "amount",
          "currencyCode",
          "order"
        ],
        "title": "CreatePaymentIntentRequest"
      },
      "RefundResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paymentIntentId": {
            "type": "string",
            "description": "Unique identifier for the payment intent.",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Unique identifier for the refund.",
            "nullable": true
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "description": "The reason for the refund.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The description of the refund.",
            "nullable": true
          }
        },
        "description": "The refund response object.",
        "title": "RefundResponse"
      },
      "CreateRefundResponse": {
        "type": "object",
        "description": "The create refund response object.",
        "example": {
          "statusCode": "Successful",
          "message": null,
          "crossReference": "f3a72807-6502-4e3d-8374-c3c451257d91",
          "refundId": "rfnd_127usj"
        },
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "The status of the refund. Possible values: Successful, Referred, Declined, Duplicate, Failed.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The description of the refund.",
            "nullable": true
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Unique identifier for the refund.",
            "nullable": true
          }
        },
        "title": "CreateRefundResponse"
      },
      "CreateRefundRequest": {
        "type": "object",
        "description": "The create refund request object.",
        "example": {
          "amount": 100,
          "currencyCode": "GBP",
          "refundReason": "Duplicate transaction",
          "notes": "notes"
        },
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The refund amount in the minor unit, for example \"100\" for 1.00 GBP.",
            "format": "int64"
          },
          "currencyCode": {
            "type": "string",
            "description": "Three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217).",
            "minLength": 1
          },
          "refundReason": {
            "type": "string",
            "description": "The reason for the refund.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The description of the refund.",
            "nullable": true
          }
        },
        "required": [
          "amount",
          "currencyCode"
        ],
        "title": "CreateRefundRequest"
      },
      "CreateReversalResponse": {
        "type": "object",
        "description": "The create reversal response object.",
        "example": {
          "statusCode": "Successful",
          "message": null,
          "crossReference": "f3a72807-6502-4e3d-8374-c3c451257d91",
          "reversalId": "rvs_127usj"
        },
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "The status of the reversal. Possible values: Successful, Referred, Declined, Duplicate, Failed.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The description of the reversal.",
            "nullable": true
          },
          "crossReference": {
            "type": "string",
            "description": "Globally unique identifier(GUID) for the payment. Doesn't have an expiry date.",
            "nullable": true
          },
          "reversalId": {
            "type": "string",
            "description": "Unique identifier for the reversal.",
            "nullable": true
          }
        },
        "title": "CreateReversalResponse"
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Type into the textbox: Bearer {your JWT token}.",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}