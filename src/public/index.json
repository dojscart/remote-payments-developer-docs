[
{
	"uri": "/docs/",
	"title": "Documentation",
	"tags": [],
	"description": "first page",
	"content": "  Not a developer? You can use Dojo throught any numbers of third-parties without programming skills.\n"
},
{
	"uri": "/05-development-resources/data-types/",
	"title": "Data types",
	"tags": [],
	"description": "",
	"content": "We use a coherent format for data such as currencies, amounts and dates across all Dojo APIs.\nCurrency and amount We use the ISO 4217 standard for defining currencies. For examples, USD or GBP. We express amounts in minor units according to the ISO 4217 standard. That means they are expressed in the smallest unit of currency. For example, GBP with 500 representing £5, GBP with 50 representing £0.50.\n{ \u0026#34;value\u0026#34;: 500, \u0026#34;currencyCode\u0026#34;: \u0026#34;GBP\u0026#34; } Date and time Date and time are expressed according to the ISO 8601 format standard with combined date, time and timezone. For example, 2021-05-12T07:45:00Z representing the 12th of May 2021 at 07:45:00 and the UTC timezone. The exception to this are expiryDate fields where we accept values in the MM/YY format.\n{ \u0026#34;transactionDateTime\u0026#34;: \u0026#34;2021-05-12T07:45:00Z\u0026#34;, \u0026#34;expiryDate\u0026#34;: \u0026#34;04/21\u0026#34; } Country Countries are handled as two-letter country codes according to ISO 3166-1-alpha-2. For example, GB for the Great Britain.\n{ \u0026#34;countryCode\u0026#34;: \u0026#34;GB\u0026#34; } "
},
{
	"uri": "/05-development-resources/",
	"title": "Development resources",
	"tags": [],
	"description": "",
	"content": "  Data types We use a coherent format for data such as currencies, amounts and dates across all Dojo APIs. Currency and amount We use the ISO 4217 standard for defining currencies. For examples, USD or GBP. We express amounts in minor units according to the ISO 4217 standard. That means they are expressed in the smallest unit of currency. For example, GBP with 500 representing £5, GBP with 50 representing £0.50. { \u0026#34;value\u0026#34;: 500, \u0026#34;currencyCode\u0026#34;: \u0026#34;GBP\u0026#34; } Date and time Date and time are expressed according to the ISO 8601 format standard with combined date, time and timezone.\n  Testing Use the information on this page to test your integration. Test keys Our testing environment provides an excellent opportunity to make sure everything is working perfectly. You can find your test keys ???, test keys use the prefix sk_test and pk_test. Test card numbers To simulate payments, use any of the following test card details. Card type Test credit number   Versioning Dojo API uses the YYYY-MM-DD API version-naming scheme. You have to pass the version as the x-api-version header in all API calls. When you make the first API request, use current data as a version to get the latest avalible version. The current version is 2021-00-00. Breaking changes Breaking or backwards-incompatible changes include: Changing the URL format. Changing existing error codes and messages. Changing parameters from non-mandatory to mandatory. Changing the type of a parameter.\n  "
},
{
	"uri": "/05-development-resources/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Use the information on this page to test your integration.\nTest keys Our testing environment provides an excellent opportunity to make sure everything is working perfectly.\nYou can find your test keys ???, test keys use the prefix sk_test and pk_test.\nTest card numbers To simulate payments, use any of the following test card details.\n   Card type Test credit number              "
},
{
	"uri": "/05-development-resources/versioning-overview/",
	"title": "Versioning",
	"tags": [],
	"description": "",
	"content": "Dojo API uses the YYYY-MM-DD API version-naming scheme. You have to pass the version as the x-api-version header in all API calls.\nWhen you make the first API request, use current data as a version to get the latest avalible version.\nThe current version is 2021-00-00.\nBreaking changes Breaking or backwards-incompatible changes include:\n Changing the URL format. Changing existing error codes and messages. Changing parameters from non-mandatory to mandatory. Changing the type of a parameter. Changing authentication mechanism. Adding new request or response parameters to existing API methods. Removing or renaming a resource, field, method or an enum value.  If we make breaking changes to the API, we release new dated versions. But we don\u0026rsquo;t change your version, you have to change it yourself.\nNon-breaking changes The following types of changes do not qualify as breaking changes, this list is not exhaustive:\n Adding new HTTP headers. Adding new values to an enum if there is a default defined. Adding new HTTP methods to existing resources. Changing parameters from mandatory to non-mandatory.  How to upgrade API When we release a new API version, you can choose to upgrade to gain access to new features. To change the API version you need to change the x-api-version header.\nWhen non-breaking changes are implemented into the current API version, these features will become available without needing an upgrade.\nChangelog The changelog reflects all changes. Non-breaking changes are not included in the changelog, because will become available without needing an upgrade.\nYYYY-MM-DD  Change 1 Change 2  "
},
{
	"uri": "/00-getting-started/get-started/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Authentication Dojo uses API keys to authenticate requests. You can manage API keys in the Dojo account. Never share your API keys. Keep them guarded and secure.\nAuthentication is handled via HTTP headers, and the X-Api-Key header.\nGetting started Before you start you need to get API keys and locationId. You can get them to\n"
},
{
	"uri": "/00-getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": "   Authentication Dojo uses API keys to authenticate requests. You can manage API keys in the Dojo account. Never share your API keys. Keep them guarded and secure. Authentication is handled via HTTP headers, and the X-Api-Key header. Getting started Before you start you need to get API keys and locationId. You can get them to\n  "
},
{
	"uri": "/01-payments/",
	"title": "Payments",
	"tags": [],
	"description": "",
	"content": "  "
}]